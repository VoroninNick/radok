.wizard-step step-number="3" class="#{'active' if @project.active_step_number == 3}"
  .wizard-step-edit-tooltip
    /! ngInclude: '/assets/pen.svg'
    .svg-container
      = embedded_svg_from_assets "pen"

  .wizard-step-line
  .wizard-step-counter data-number="3"
  .wizard-step-content
    /! ngIf: !(active)
    /! ngIf: step_title
    .wizard-step-content-content
      form name="wizard.testing_type_form" novalidate=""
        .questions
          .question
            .text
              | What methodology are you looking for?

            div
              .inputs.ng-scope
                - methodology = "exploratory"
                #testing_type_form__type_of_test_exploratory.input.radio.ng-pristine.ng-untouched.ng-valid.ng-isolate-scope label="Exploratory" name="methodology_type" ng-model="wizard.data.tp__type_of_testing" value="exploratory"
                  input#methodology__testing_type_form__type_of_test_exploratory.ng-untouched.ng-valid.ng-dirty.ng-valid-parse name="methodology_type" ng-model="model" type="radio" value="exploratory" checked=("checked" if methodology == "exploratory")
                  label for="methodology__testing_type_form__type_of_test_exploratory"
                  label.ng-binding for="methodology__testing_type_form__type_of_test_exploratory"  Exploratory
                  label.description
                    |This is unscripted testing. Our testers use your product like any normal user would.
                  /! ngIf: description
                  .input-related-content
                    = rf_input label: "Please provide testing instructions for the testers here...", type: "text", name: "exploratory_description", model: "wizard.exploratory_description"
                /rf-input#methodology_1_description label=("Please provide testing instructions for the testers here...") name="methodology_1_description" ng-model="wizard.data.tp__exploratory_instructions" ng-required=("wizard.data.tp__type_of_testing == 'exploratory' ") required="required" type="text"
                  .rf-input.string
                    label Please provide testing instructions for the testers here...
                    .input-border-wrap
                    /textarea.ng-pristine.ng-valid.ng-binding.ng-touched ng-change="onChange()" ng-model="value"  &lt;div class='error-messages' ng-show='hasErrors()'&gt;&lt;div class='error-message' ng-repeat='(error_key, error_value) in error()'&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
                #testing_type_form__type_of_test_test_case.input.radio.ng-pristine.ng-untouched.ng-valid.ng-isolate-scope label=("Test-case driven") name="methodology_type" ng-model="wizard.data.tp__type_of_testing" value="test_case"
                  input#methodology__testing_type_form__type_of_test_test_case.ng-untouched.ng-valid.ng-dirty name="methodology_type" ng-model="model" type="radio" value="test_case" checked=("checked" if methodology == "test_case")
                  label for="methodology__testing_type_form__type_of_test_test_case"
                  label.ng-binding for="methodology__testing_type_form__type_of_test_test_case"  Test-case driven
                  /! ngIf: description
                  .input-related-content
                    .upload-area
                      input#test_case_files.file-upload-input type="file" multiple="multiple" list-selector=".test_case_files-list" data-attachment-name="test_case_files"
                      = rf_button title: "upload files", class: "rf-upload-button rf-wizard-upload-button rf-test-case-files-upload-button", svg: "upload", size: "medium"
                      .file-upload-files-list.test_case_files-list data-attachment-name="test_case_files"
                        - @project.test_case_files.each do |f|
                          .file data-id=f.id
                            = f.data_file_name
                            span.delete



          .question
            .text.ng-binding ng-class=("centered ? 'centered' : ''")
              | What are the product's main components?
            /! ngIf: required
            div ng-transclude=""
              p.light.ng-scope
                | Optionally, you can provide a list of the main components of your product. This is used to group the bugs around certain aspects of your product. For example, these can be: Homepage, Contact us form, Main menu, Level 1 etc. or UI issues and functional issues.
              /tags-input.ng-pristine.ng-untouched.ng-valid.ng-scope.ng-isolate-scope.ng-valid-max-tags.ng-valid-min-tags.ng-valid-leftover-text ng-model="wizard.product_main_components"
                .host ng-click="eventHandlers.host.click()" tabindex="-1" ti-transclude-append=""
                  .tags ng-class=("{focused: hasFocus}")
                    ul.tag-list
                    /! ngRepeat: tag in tagList.items track by track(tag)
                    input
                    span.input style=("visibility: hidden; width: auto; white-space: pre; display: none;")  Add a tag

              /.rf-input.string required=""
                input.tags-input name="tags" value=""
              = rf_input name: "tags", model: "wizard.tags", type: "tags", required: true, label: "Type tags...", required_message: "This field is required"