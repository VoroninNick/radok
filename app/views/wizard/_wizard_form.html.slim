/= simple_form_for @project, url: wizard_path, method: :post do |f|
- content_for :javascript do
  script type="text/javascript" src="/assets/wizard_js.js"


.wizard-controller ng-controller="Wizard"
form for="project" url=short_wizard_path method="post" json="{}"
  fieldset.wizard-step step="1"
    #project-test-type
      .columns.large-12
        .label.text-center
          |What type of tests are you looking for?

      - @test_types.each_with_index do |test_type, index|
        - value = test_type.name; label = test_type.name; image=test_type.image.url(:original); model = "project.test_type"; name = "project_test_type"; input_id = "project_test_type_#{index + 1}"
        .columns.large-4.text-center
          .input.image-radio-button class="project_test_type" as="image-radio-button" model=model image=image label=label value=value
            input id=input_id value=value name=name type="radio"
            label.image-label for=input_id
              img src=image
            label.label for=input_id
              = label
      .clearfix

    #project-product-type
      .columns.large-12
        .label.text-center
          |For what type of product?

      - @product_types.each_with_index do |test_type, index|
        - value = test_type.name; label = test_type.name; image=test_type.image.url(:original); model = "project.product_type"; name = "project_product_type"; input_id = "project_product_type_#{index + 1}"
        .columns.large-3.text-center
          .input.image-radio-button class="project_product_type" as="image-radio-button" model=model image=image label=label value=value
            input id=input_id value=value name=name type="radio"
            label.image-label for=input_id
              img src=image
            label.label for=input_id
              = label

      .clearfix


    /.input as="radio-button"
      input id="test_type_2" type="radio" name="test_type" value="2"
      label for="test_type_2"
        |Locales




    /#project-test-type-input.text-center
      .columns.large-12
        .label.text-center
          |What type of tests are you looking for?
      - @test_types.each do |test_type|
        - model = "project.test_type_name"
        - value = test_type.name
        - input_id = model.gsub(".", '_') + value
        - image_url = test_type.image.url(:original)
        - checked = @project.test_type == test_type
        - input_name = "name"



        .columns class="large-#{12 / @test_types.length}"
          .input.image-radio-button as="image-radio-button" value=value image=image_url model="project.test_type_name"
            input checked=("checked" if checked) value='#{value}' type='radio' name='#{input_name}' id="project_test_type_#{test_type.id}"





    /#project-product-type-input.text-center
      .columns.large-12
        .label.text-center
          |For what type of product?
      - @product_types.each do |product_type|
        .columns class="large-#{12 / @product_types.length}"
          .input.image-radio-button as="image-radio-button" checked=("checked" if @project.product_type == product_type) value=product_type.name image=product_type.image.url(:original) model="project.product_type_name"


  /.label
      |On what platforms would you like your product to be tested?
    /.row
      .columns.large-6
        .blue-label
    /= f.collection_radio_buttons :test_type, [], :id, :name, required: true, class: "hello" do |b|

    /= f.association :test_type, as: :image_radio_buttons, required: true, label: "What type of tests are you looking for?", wrapper_html: {class: "hide-star text-center option-large-4"}

    /= f.association :product_type, as: :image_radio_buttons, required: true, label: "For what type of product?", wrapper_html: {class: "hide-star text-center option-large-3" }

  .configuration-steps
    /.wizard-step step="2"
      = f.label  :platforms, "On what platforms would you like your product to be tested?", class: "question"
      = f.simple_fields_for :platforms do |fp|
        = fp.input :testers_count

    /= render "new_platforms_step"

    fieldset.wizard-step step="2" type="platforms"
      .wizard-step-line
      .wizard-step-counter data-number="1"
      .wizard-step-content
        .label
          |On what platforms would you like your product to be tested?
        .input.platforms-input as="platforms" testers-by-platform=@project.testers_by_platform.to_json options=@platforms_json model="project.platforms" platforms-by-product-type=@platform_ids_by_product_type.to_json
          .clearfix
          - Wizard::Platform.roots.each do |platform|
            .platform data-id=platform.id
              .name.platform-label
                = platform.name
              .human-svg-wrap.platform-user-icon
                = embedded_svg_from_assets("user")
              .platform-options
                - platform.children.each do |c|
                  .option-count platform-subitem-id=c.id
                    .platform-option-label
                      = c.name
                    .input-wrap
                      input value="0" pattern='[0-9]*' type='text'
                      label class='decrement' for='platform-1-subitem-1'
                      label class='increment' for='platform-1-subitem-1'
            /.option-count platform-subitem-id=


    /.wizard-step
      .input.image-radio-buttons.required model=""

    fieldset.wizard-step step="3" type="project_info"
      .wizard-step-line
      .wizard-step-counter data-number="2"
      .wizard-step-content
        /= f.input :project_name, label: "What is the name of this wonderful project?"
        /= f.input :project_version, label: "What is version number of the new release that you'd like us to test?"

        label.label for="project_project_name"
          |What is the name of this wonderful project?

        .input.string as="string" model="project.project_name" value=@project.project_name
          label.placeholder for="project_project_name"
            |Project name
          input type="text" id="project_project_name" value=@project.project_name

        label.label for="project_project_version"
          |What is version number of the new release that you'd like us to test?
        .input.string as="string" model="project.project_version" value=@project.project_version
          label.placeholder for="project_project_version"
            |Project version
          input type="text" id="project_project_version" value=@project.project_version

        label.label
          |In what language(s) is the project?
        .input.collection-checkboxes as="collection-checkboxes" model="project.project_languages"
          .options
            - @project_languages.each_with_index do |language, index|
              - input_id = "project_project_languages_#{index + 1}"
              span.option
                input id=input_id type="checkbox" value=language
                label.custom-checkbox for=input_id
                label for=input_id
                  |#{language}


        label.label
          |In what language(s) should the bugs be reported?
        .input.collection-checkboxes as="collection-checkboxes" model="project.report_languages"
          .options
            - @report_languages.each_with_index do |language, index|
              - input_id = "project_report_languages_#{index + 1}"
              span.option
                input id=input_id type="checkbox" value=language
                label.custom-checkbox for=input_id
                label for=input_id
                  |#{language}

        .input.string as="string" model="project.project_name" value=@project.project_name
        .input.string model="project.project_version" value=@project.project_version
        .input.has-and-belongs-to-many.collection-check-boxes as="collection-check-boxes" model="project.project_languages" options=Wizard::Test.available_project_languages default-index="0"
        .input.collection-check-boxes as="collection-check-boxes" model="project.report_languages" options=Wizard::Test.available_report_languages value-property="id" text-property="name" default-index="0"

    /.input.collection-check-boxes
          = f.label :project_languages", "In what language(s) is the project?"
          = f.collection_check_boxes :project_languages, [[:uk, "Ukrainian"], [:en, "English"], [:ru, "Russian"], [:pl, "Polish"], [:es, "Spanish"]], :first, :last
    /.input.collection-checkboxes
          = f.label "In what language(s) should the bugs be reported?"
          = f.collection_check_boxes :report_languages, [[:uk, "Ukrainian"], [:en, "English"], [:ru, "Russian"], [:pl, "Polish"], [:es, "Spanish"]], :first, :last

    fieldset.wizard-step.project-components-step step="4" type="project_components"
      .wizard-step-line
      .wizard-step-counter data-number="3"
      .wizard-step-content
        .label
          |What methodology are you looking for?

        .input.radio-button model="project.methodology_type"  class="#{@project.exploratory? ? 'checked' : 'unchecked' }"
          input type="radio" value="exploratory" id="project_methodology_type_exploratory" name="project_methodology_type" checked=('checked' if @project.exploratory?)
          label.custom-radio-button for="project_methodology_type_exploratory"
          label for="project_methodology_type_exploratory"
            |Exploratory
          .help
            |This is unscripted testing. Our testers use your product like any normal user would.

        .input.text.project_exploratory_instructions_input as="text" model="project.exploratory_instructions"
          label.placeholder for="project_exploratory_instructions"
            |Please provide testing instructions for the testers here...
          textarea model="project.exploratory_instructions" id="project_exploratory_instructions"

        .input.radio-button model="project.methodology_type" class="#{@project.test_case_driven? ? 'checked' : 'unchecked' }"
          input type="radio" value="test_case_driven" id="methodology_type_test_case_driven" name="project_methodology_type" checked=('checked' if @project.test_case_driven?)
          label.custom-radio-button for="methodology_type_test_case_driven"
          label for="methodology_type_test_case_driven"
            |Test-case driven
          .help
            |You provide a specific list of steps that testers must execute.

        .input.files.test-case-files-input model="project.test_case_files"
          = rf_button title: "upload files", class: "rf-upload-button rf-wizard-upload-button rf-test-case-files-upload-button", svg: "upload", size: "medium"




        .product-main-components
          .label
            |What are the product's main components?
          p.help
            |Optionally, you can provide a list of the main components of your product. This is used to group the bugs around certain aspects of your product. For example, these can be: Homepage, Contact us form, Main menu, Level 1 etc. or UI issues and functional issues.

          .input.tags as="tags" model="project.tags"
            label.placeholder
              |Type components here, separate by commas...
            input type="text"



        /.input.radio-button label="Exploratory" help="This is unscripted testing. Our testers use your product like any normal user would." as="radio-button" model="project.methodology_type" value="exploratory" checked=(@project.exploratory?)
        /.input.radio-button label="Test-case driven" as="radio-button" model="project.methodology_type" value="test_case_driven" checked=@project.test_case_driven?

        /.input.text as="text" model="project.exploratory_description" value=@project.exploratory_description
        /.input.files as="files" model="project.test_case_files" value=@project.test_case_files.to_json

        /.input.tags model="project.tags"

    fieldset.wizard-step step="5" type="project_access"
      .wizard-step-line
      .wizard-step-counter data-number="4"
      .wizard-step-content
        .label
          |Please provide the URL or file to be tested
        /.input.url as="url" model="project.project_url"
        /.input.files as="files" model="project.test_files"

        .columns.large-7
          .input.url model="project.project_url" as="url"
            input placeholder="http://domain.com"
        .columns.large-1
          span.or
            |or
        .columns.large-4
          input#test_files.file-upload-input list-selector=".test_files-list" model="project.test_files" data-attachment-name="project.test_files" type="file" multiple=""
          = rf_button title: "upload files", class: "rf-upload-button rf-wizard-upload-button rf-wizard-test-files-upload-button", svg: "upload", size: "medium"
        .columns.large-12
          .file-upload-files-list.test_files-list model="project.test_files"


        .auth-data
          .label
            |Does the product require a username or password to be accessed?


          .input.radio-button model="project.authentication_required" as="radio-button" class="#{(!@project.authentication_required?) ? 'checked' : 'unchecked' }"
            input type="radio" value="false" id="project_authentication_required_false" name="project_authentication_required" checked=('checked' if !@project.authentication_required?)
            label.custom-radio-button for="project_authentication_required_false"
            label for="project_authentication_required_false"
              |No, it does not require a username or password

          .input.boolean.radio-button as="radio-button" model="project.authentication_required" type="boolean" label="Yes, here they are:" value="true" checked=( 'checked' if @project.authentication_required?)
            input type="radio" value="true" id="project_authentication_required_true" name="project_authentication_required" checked=('checked' if @project.authentication_required?)
            label.custom-radio-button for="project_authentication_required_true"
            label for="project_authentication_required_true"
              |Yes, here they are:



          .input.string.project-auth-login model="project.auth_login"
            label.placeholder for="project_auth_login"
              |Username
            input type="text" id="project_project_name" value=@project.project_name
          .input.string.project-auth-password model="project.auth_password"
            label.placeholder for="project_auth_password"
              |Password
            input type="text" id="project_project_name" value=@project.project_name


        /.input.boolean.radio-button as="radio-button" model="project.authentication_required" type="boolean" label="No, it does not require a username or password" value="false" checked=(!@project.authentication_required?)
        /.input.boolean.radio-button as="radio-button" model="project.authentication_required" type="boolean" label="Yes, here they are:" value="true" checked=(@project.authentication_required?)

        /.input.string.project-auth-login model="project.auth_login"
        /.input.string.project-auth-password model="project.auth_password"



  = render "project_full_summary", project: @project, hide: @created.blank?