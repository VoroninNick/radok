/= simple_form_for @project, url: wizard_path, method: :post do |f|
- content_for :javascript do
  script type="text/javascript" src="/assets/wizard_js.js"


.wizard-controller ng-controller="Wizard"
form for="project" url=wizard_path method="post" json="{}"
  fieldset.wizard-step step="1"


    #project-product-type
      .columns.large-12.with-distance
        .label.text-center
          |For what type of product?

      - @product_types.each_with_index do |product_type, index|
        - checked = @project.product_type.try{|t| t.id == product_type.id } || false
        - value = product_type.name; label = product_type.name; image=product_type.image.url(:original); model = "project.product_type"; name = "project_product_type"; input_id = "project_product_type_#{index + 1}"
        .columns.large-3.small-6.medium-3.text-center
          .input.image-radio-button class="project_product_type #{checked ? 'checked' : 'unchecked'}" as="image-radio-button" model=model image=image label=label value=value
            input id=input_id value=value name=name type="radio" checked=("checked" if checked )
            label.image-label for=input_id
              img src=image
            label.label for=input_id
              = label

      .clearfix


    #project-test-type
      .columns.large-12.with-distance
        .label.text-center
          |What type of tests are you looking for?

      - @test_types.each_with_index do |test_type, index|
        - checked = @project.test_type.try { |t| t.id == test_type.id } || false
        - value = test_type.name; label = test_type.name; image=test_type.image.url(:original); model = "project.test_type"; name = "project_test_type"; input_id = "project_test_type_#{index + 1}"
        .columns.small-4.text-center
          .input.image-radio-button class="project_test_type #{checked ? 'checked' : 'unchecked'}" as="image-radio-button" model=model image=image label=label value=value
            input id=input_id value=value name=name type="radio" checked=("checked" if checked)
            label.image-label for=input_id
              img src=image
            label.label for=input_id
              = label
      .clearfix
    .button-wrap style="margin: 30px auto 0 auto; position: relative; width: 200px; max-width: 100%;"
      = rf_button(class: "rf-step-configure-button", full_width: true, svg: "rf-icon-configure", title: "configure", disabled: false)










  .configuration-steps
    fieldset.wizard-step step="2" type="platforms" data-name="Platforms step"
      .wizard-step-line
      .wizard-step-counter data-number="1"
      .wizard-step-content
        .label
          |On what platforms would you like your product to be tested?
        .blue-header
          |Platform / Testers per platform

        .input.platforms-input data-name="On what platforms would you like your product to be tested?" as="platforms" testers-by-platform=@project.testers_by_platform.to_json options=@platforms_json model="project.platforms" platforms-by-product-type=@platform_ids_by_product_type.to_json
          .clearfix
          - sorted_platform_bindings = @project.testers_by_platform.sort{|a,b| a[:platform_id] <=> a[:platform_id] }
          - Wizard::Platform.roots.each do |platform|

            .platform data-id=platform.id
              .name.platform-label
                = platform.name
              .human-svg-wrap.platform-user-icon
                = embedded_svg_from_assets("user")
              .platform-options
                - platform.children.each do |c|
                  - binding = sorted_platform_bindings.select { |b| b[:platform_id] == c.id }.first
                  - binding_current_testers_count = binding.try { |b| b[:testers_count] } || 0

                  .option-count platform-subitem-id=c.id class="#{ binding_current_testers_count > 0 ? 'not-empty' : 'empty' }"
                    .platform-option-label
                      = c.name
                    .input-wrap
                      input pattern='[0-9]*' type='text' value="#{binding_current_testers_count}"
                      label class='decrement' for='platform-1-subitem-1'
                      label class='increment' for='platform-1-subitem-1'
            /.option-count platform-subitem-id=



        .hours-per-tester
          .blue-header.ng-binding.ng-scope ng-class=("columns ? 'columns large-false' : ''") text=("Time (hours per tester)")
            | Time (hours per tester)
          p
            | How much effort would you like each tester to spend testing your product?
          .available-hours
            /! ngRepeat: hour in wizard.hours

            - 5.times do |h|
              - hour = h + 1
              - html_input_id = "hour-#{hour}"
              - selected = hour == @project.hours_per_tester
              label.hour data-hours=hour for=html_input_id class="#{'selected' if selected}"
                input id=html_input_id name="hours_per_tester" type="radio" value=hour model="project.hours_per_tester" data-type="integer"
        .clearfix
        div style="display: block;"
          label#platforms-empty-error.error.error-required
            |Please choose at least one tester

        .clearfix
        label.label.your-comment-label
          |Your comment
        .input.text.project-platforms-comment_input as="text" model="project.platforms_comment" data-name="Your comment"
          label.placeholder.hiding-placeholder for="project_platforms_comment"
            |Your comments and additional instructions can be here...
          textarea id="project_platforms_comment"
            = @project.platforms_comment


    /.wizard-step
      .input.image-radio-buttons.required model=""

    fieldset.wizard-step step="3" type="project_info" data-name="Project info step"
      .wizard-step-line
      .wizard-step-counter data-number="2"
      .wizard-step-content
        /= f.input :project_name, label: "What is the name of this wonderful project?"
        /= f.input :project_version, label: "What is version number of the new release that you'd like us to test?"

        label.label for="project_project_name"
          |What is the name of this project?
          span.star

        .input.string.has-error-label as="string" model="project.project_name" value=@project.project_name required="true"
          label.placeholder.hiding-placeholder for="project_project_name"
            |Project name
          label.error.error-required for="project_project_name"
            |Please enter project name
          input type="text" id="project_project_name" value=@project.project_name

        label.label.with-input-distance for="project_project_version"
          |What is version number of the new release that you'd like us to test?
          span.star
        .input.string.has-error-label as="string" model="project.project_version" value=@project.project_version required="true"
          label.placeholder.hiding-placeholder for="project_project_version"
            |Project version
          label.error.error-required for="project_project_version"
            |Please enter project version
          input type="text" id="project_project_version" value=@project.project_version

        label.label.with-input-distance
          |In what language(s) is the project?
          span.star
        .input.collection-checkboxes as="collection-checkboxes" model="project.project_languages" min="1" required="true"
          .options
            - @project_languages.each_with_index do |language, index|
              - input_id = "project_project_languages_#{index + 1}"
              span.option
                input id=input_id type="checkbox" value=language checked=("checked" if @project.project_languages.include?(language))
                label.custom-checkbox for=input_id
                label for=input_id
                  |#{language}

            .clearfix
          label.error.error-required
            |Please choose one or more languages

        label.label.with-input-distance
          |In what language should the bugs be reported?
          span.star
        .input.collection-radio-buttons.clearfix as="collection-radio-buttons" model="project.report_languages" min="1" required="true"
          .options
            - @report_languages.each_with_index do |language, index|
              - input_id = "project_report_languages_#{index + 1}"
              span.option
                input id=input_id type="radio" name="project[report_languages]" value=language checked=("checked" if @project.report_languages.include?(language))
                label.custom-radio-button for=input_id
                label for=input_id
                  |#{language}
            .clearfix

          label.error.error-required
            |Please choose one or more languages

        label.label.your-comment-label.with-input-distance.clear
          |Your comment
        .input.text.project-info-comment_input as="text" model="project.project_info_comment"
          label.placeholder.hiding-placeholder for="project_info_comment"
            |Your comments and additional instructions can be here...
          textarea id="project_info_comment"
            = @project.project_info_comment

        /..input.string as="string" model="project.project_name" value=@project.project_name
        /.input.string model="project.project_version" value=@project.project_version
        /.input.has-and-belongs-to-many.collection-check-boxes as="collection-check-boxes" model="project.project_languages" options=Wizard::Test.available_project_languages default-index="0"
        /.input.collection-check-boxes as="collection-check-boxes" model="project.report_languages" options=Wizard::Test.available_report_languages value-property="id" text-property="name" default-index="0"

    /.input.collection-check-boxes
          = f.label :project_languages", "In what language(s) is the project?"
          = f.collection_check_boxes :project_languages, [[:uk, "Ukrainian"], [:en, "English"], [:ru, "Russian"], [:pl, "Polish"], [:es, "Spanish"]], :first, :last
    /.input.collection-checkboxes
          = f.label "In what language(s) should the bugs be reported?"
          = f.collection_check_boxes :report_languages, [[:uk, "Ukrainian"], [:en, "English"], [:ru, "Russian"], [:pl, "Polish"], [:es, "Spanish"]], :first, :last

    fieldset.wizard-step.project-components-step step="4" type="project_components" data-name="Project components step"
      .wizard-step-line
      .wizard-step-counter data-number="3"
      .wizard-step-content
        .label
          |What methodology are you looking for?

        .input.radio-button model="project.methodology_type" as="radio-button"  class="#{@project.exploratory? ? 'checked' : 'unchecked' }" value="exploratory"
          input type="radio" value="exploratory" id="project_methodology_type_exploratory" name="project_methodology_type" checked=('checked' if @project.exploratory?)
          label.custom-radio-button for="project_methodology_type_exploratory"
          label for="project_methodology_type_exploratory"
            |Exploratory
          .help
            |This is unscripted testing. Our testers use your product like any normal user would.

        .nested-input-group
          .input.text.project_exploratory_instructions_input as="text" model="project.exploratory_instructions"
            label.placeholder.hiding-placeholder for="project_exploratory_instructions"
              |Please provide testing instructions for the testers here...
            textarea id="project_exploratory_instructions"
              = @project.exploratory_description

        .input.radio-button model="project.methodology_type" as="radio-button" class="#{@project.test_case_driven? ? 'checked' : 'unchecked' }" value="test-case-driven"
          input type="radio" value="test_case_driven" id="methodology_type_test_case_driven" name="project_methodology_type" checked=('checked' if @project.test_case_driven?)
          label.custom-radio-button for="methodology_type_test_case_driven"
          label for="methodology_type_test_case_driven"
            |Test-case driven
          .help
            |You provide a specific list of steps that testers must execute.
        .nested-input-group
          /.input.files.test-case-files-input model="project.test_case_files"
          div#test-case-driven-inputs-wrap style="#{'' if !@project.test_case_driven?}"
            input#test_case_files.file-upload-input list-selector=".test_case_files-list" model="project.test_case_files" data-attachment-name="test_case_files" type="file" multiple="" push="false" trigger-changes="false"
            = rf_button title: "upload files", class: "rf-upload-button rf-wizard-upload-button rf-test-case-files-upload-button", svg: "upload", size: "medium"
            .file-upload-files-list.test_case_files-list model="project.test_case_files" data-attachment-name="test_case_files"
              - @project.test_case_files.each do |asset|
                .file data-id="#{asset.id}" data-file-name="#{asset.data_file_name}"
                  span class='file-name'
                    |#{asset.data_file_name}

                  span class='delete'



        .product-main-components
          .label
            |What are the product's main components?
          p.help
            |Optionally, you can provide a list of the main components of your product. This is used to group the bugs around certain aspects of your product. For example, these can be: Homepage, Contact us form, Main menu, Level 1 etc. or UI issues and functional issues.

          .input.tags as="tags" model="project.main_components" required="true" data-name="Project components"
            label.placeholder.hiding-placeholder
              |Type components here, separate by commas...
            label.error.error-required
              |Type components here, separate by &laquo;ENTER&raquo;
            input type="text" value=@project.main_components.join(",")



        /.input.radio-button label="Exploratory" help="This is unscripted testing. Our testers use your product like any normal user would." as="radio-button" model="project.methodology_type" value="exploratory" checked=(@project.exploratory?)
        /.input.radio-button label="Test-case driven" as="radio-button" model="project.methodology_type" value="test_case_driven" checked=@project.test_case_driven?

        /.input.text as="text" model="project.exploratory_description" value=@project.exploratory_description
        /.input.files as="files" model="project.test_case_files" value=@project.test_case_files.to_json

        /.input.tags model="project.tags"

    fieldset.wizard-step step="5" type="project_access" data-name="Project access step"
      .wizard-step-line
      .wizard-step-counter data-number="4"
      .wizard-step-content
        .label id="test-url-or-files-label"
          |Please provide the URL or file to be tested
        /.input.url as="url" model="project.project_url"
        /.input.files as="files" model="project.test_files"

        .columns.large-7.small-padding-right-0 style="padding-left: 0; "
          .input.url model="project.project_url" as="url"
            input placeholder="http://domain.com" value=@project.project_url
        .columns.large-1 style="text-align: center;"
          span.or
            |or
        .columns.large-4.small-padding-0
          input#test_files.file-upload-input list-selector=".test_files-list" model="project.test_files" data-attachment-name="test_files" type="file" multiple="" push="false" trigger-changes="false"
          = rf_button title: "upload files", class: "rf-upload-button rf-wizard-upload-button rf-wizard-test-files-upload-button", svg: "upload", size: "medium"
        .columns.large-12
          .file-upload-files-list.test_files-list model="project.test_files" data-attachment-name="test_files"
            - @project.test_files.each do |asset|
              .file data-id="#{asset.id}" data-file-name="#{asset.data_file_name}"
                span class='file-name'
                  |#{asset.data_file_name}

                span class='delete'

        .columns.large-12
          label#test-url-or-files-required-error.error.error-required for="test-url-or-files-label"
            |Please type url or upload at least one file


        .auth-data
          .label
            |Does the product require a username or password to be accessed?


          .input.radio-button model="project.authentication_required" as="radio-button" class="#{(!@project.authentication_required?) ? 'checked' : 'unchecked' }"
            input type="radio" value="false" id="project_authentication_required_false" name="project_authentication_required" checked=('checked' if !@project.authentication_required?)
            label.custom-radio-button for="project_authentication_required_false"
            label for="project_authentication_required_false"
              |No, it does not require a username or password

          .input.boolean.radio-button as="radio-button" model="project.authentication_required" type="boolean" label="Yes, here they are:" value="true" checked=( 'checked' if @project.authentication_required?)
            input type="radio" value="true" id="project_authentication_required_true" name="project_authentication_required" checked=('checked' if @project.authentication_required?)
            label.custom-radio-button for="project_authentication_required_true"
            label for="project_authentication_required_true"
              |Yes, here they are:


          .nested-input-group
            .input.string.project-auth-login.input-with-indent as="string" model="project.auth_login"
              label.placeholder.hiding-placeholder for="project_auth_login"
                |Username
              input type="text" id="project_auth_login" value=@project.auth_login
            .input.string.project-auth-password model="project.auth_password" as="string"
              label.placeholder.hiding-placeholder for="project_auth_password"
                |Password
              input type="text" id="project_auth_password" value=@project.auth_password

        .clearfix

        label.label.with-input-distance
          |Contact person


        .input.string.project-contact-person-name.input-with-indent model="project.contact_person_name" as="string"
          label.placeholder.hiding-placeholder for="project_contact_person_name"
            |Name
          input type="text" id="project_contact_person_name" value=@project.contact_person_name

        .input.string.project-contact-person-email.input-with-indent model="project.contact_person_email" as="string"
          label.placeholder.hiding-placeholder for="project_contact_person_email"
            |Email
          input type="text" id="project_contact_person_name" value=@project.contact_person_email

        .input.string.project-contact-person-phone.input-with-indent model="project.contact_person_phone" as="string"
          label.placeholder.hiding-placeholder for="project_contact_person_email"
            |Phone
          input type="text" id="project_contact_person_phone" value=@project.contact_person_phone

        .columns.large-12.small-padding-0 style="padding-left: 0;"
          label.label.your-comment-label.with-input-distance
            |Your comment
          .input.text.project-access-comment_input as="text" model="project.project_access_comment"
            label.placeholder.hiding-placeholder for="project_access_comment"
              |Your comments and additional instructions can be here...
            textarea id="project_access_comment"
              = @project.project_access_comment




        /.input.boolean.radio-button as="radio-button" model="project.authentication_required" type="boolean" label="No, it does not require a username or password" value="false" checked=(!@project.authentication_required?)
        /.input.boolean.radio-button as="radio-button" model="project.authentication_required" type="boolean" label="Yes, here they are:" value="true" checked=(@project.authentication_required?)

        /.input.string.project-auth-login model="project.auth_login"
        /.input.string.project-auth-password model="project.auth_password"



  = render "project_full_summary", project: @project, hide: @created.blank?