/ng-init="wizard.platforms = #{@platforms.to_json}; wizard.show_help = true;"

/("rf-functional-test", "test_type", "Functional test", "functional", "wizard.type_of_test", 4, "Responsive web design (RWD) is an approach to web design aimed at crafting sites to provide an optimal viewing experience")
#wizard-controller ng-controller="WizardController" ng-init="wizard.show_help = true;"
  /h1 ng-if="wizard.type_of_test && wizard.product_type"
    |{{wizard | json}}
  #wizard-banner
  #wizard-content
    /.test
      h1
        |{{title}}
      optionimage data="option_image_data"
      container
        .item
          |item-name: {{name}}
        .item
      h2
        |global scope:
      h3
        |title: {{title}}

      h1
        |selected_test_type: {{wizard.type_of_test}}
      input type="radio" value="functional" ng-model="selected_test_type" name="selected_test_type_global" id="selected_test_type_1"
      input type="radio" value="localization" ng-model="selected_test_type" name="selected_test_type_global" id="selected_test_type_2"

      hr

      option-image image-path="/assets/rf-functional-test.svg" name="wizard_test_type" label="functional test" value="functional" model="wizard.type_of_test" id="1" description="name"
      option-image image-path="/assets/rf-functional-test.svg" name="wizard_test_type" label="localization test" value="localization"  model="wizard.type_of_test"  id="2"
      option-image image-path="/assets/rf-functional-test.svg" name="wizard_test_type" label="unit test" value="unit"    id="3" model="wizard.type_of_test"

      container columns-count="8"

    #wizard-steps
      /intro-step



    /#wizard-steps
      = intro_step do
        = question("What type of tests are you looking for?", {  }, true) do
          form method="post" action=""
            /input type="radio"
            .row
              .input.required
                = option_image("rf-functional-test", "test_type", "Functional test", "functional", "wizard.type_of_test", 4, "Responsive web design (RWD) is an approach to web design aimed at crafting sites to provide an optimal viewing experience")
                = option_image("rf-localization-test", "test_type", "Localization test", "localization", "wizard.type_of_test", 4, "Responsive web design (RWD) is an approach to web design aimed at crafting sites to provide an optimal viewing experience")
                = option_image("rf-usability-test", "test_type", "Usability test", "usability", "wizard.type_of_test", 4, "Responsive web design (RWD) is an approach to web design aimed at crafting sites to provide an optimal viewing experience")

        /.step-nav-buttons
          = next_question_button class: "wizard.type_of_test && !wizard.configure_mode ? 'visible' : 'hide'", click: "next_question()"

        = question("For what type of product?", { class: "wizard.type_of_test ? 'visible' : 'hide'" }, true) do
          form method="post" action=""
            /input type="radio"
            .row
              .input.required
                = option_image("rf-mobile-apps", "product_type", "Mobile apps", "mobile_apps", "wizard.product_type", 3, "Responsive web design (RWD) is an approach to web design aimed at crafting sites to provide an optimal viewing experience")
                = option_image("rf-responsive", "product_type", "Responsive website", "responsive_website", "wizard.product_type", 3, "Responsive web design (RWD) is an approach to web design aimed at crafting sites to provide an optimal viewing experience")
                = option_image("rf-software", "product_type", "Software", "software", "wizard.product_type", 3, "Responsive web design (RWD) is an approach to web design aimed at crafting sites to provide an optimal viewing experience")
                = option_image("rf-games", "product_type", "Games", "games", "wizard.product_type", 3, "Responsive web design (RWD) is an approach to web design aimed at crafting sites to provide an optimal viewing experience")
        .step-nav-buttons
      /= configure_button click: "wizard.show_mini_summary = true; wizard.configure_mode = true; configure();", class: "wizard.type_of_test && wizard.product_type && !wizard.configure_mode ? 'visible' : 'hide'"
      /= next_step_button(3, "Platforms")
      /= prev_step_button(1)

      /= wizard_step(2) do

      .configuration-steps ng-class="[(wizard.configure_mode ? 'visible' : 'hide')]"
        = wizard_step(1, "On what platforms would you like your product to be tested?") do
          .row
            = blue_header("Platform / testers per platform", 12)
            .platform.commentable ng-repeat="platform in wizard.platforms"
              .name
                |{{platform.name}}
              .option-count ng-repeat="platform_subitem in platform.platform_subitems"
                label
                  |{{platform_subitem.name}}
                input type="number" ng-model="platform_subitem.count" min="0"

            /= platform("Browsers", asset_path("ie.svg")) do
              - option_count_ng_model = "wizard.testers_per_platform"
              = option_count("Internet Explorer 9", 0, option_count_ng_model)
              = option_count("Internet Explorer 10", 0, option_count_ng_model)
              = option_count("Internet Explorer 11", 0, option_count_ng_model)
              = option_count("Latest version of Firefox", 0, option_count_ng_model)
              = option_count("Latest version of Chrome", 0, option_count_ng_model)
              = option_count("Latest version of Safari", 0, option_count_ng_model)

            /= platform("IOS", asset_path("apple.svg")) do
              = option_count("iPhone 4", 0)
              = option_count("iPhone 5s", 0)
              = option_count("iPad 2", 0)
              = option_count("iPad Air", 0)
              = option_count("iPad mini", 0)
              = option_count("iPhone 6 Plus", 0)

            /= platform("Android", asset_path("android.svg")) do
              = option_count("Android phone (Samsung)", 0)
              = option_count("Android phone (Non-Samsung)", 0)
              = option_count("Android tablet (Samsung)", 0)
              = option_count("Android tablet (Non-Samsung)", 0)
            .hours-per-tester
              = blue_header("Time (hours per tester)")
              p
                |How much effort would you like each tester to spend testing tour product?
              .available-hours
                label.hour for="hour-{{hour}}" data-hours="{{hour}}" ng-repeat="hour in hours"  ng-class="selected_hour == hour ? 'selected' : 'unselected' "
                  input ng-model="selected_hour" type="radio" id="hour-{{hour}}"
          .step-nav-buttons
            = next_step_button(4, "Project info")
            = prev_step_button(2)

        = wizard_step(2) do
          .questions
            = question("Have you ever tested this project with us?") do
              .inputs
                = radio_input("tested_with_us", "Yes, we tested a previous version of this project", "yes")
                = radio_input("tested_with_us", "No, this is a completely new project", "no", true)
            = question("What is the name of this wonderful project?") do
              input type="text" placeholder="Type name of the project here..."
            = question("What is version number of the new release that you'd like us to test?") do
              input type="text" placeholder="Type version number here..."
            = question("In what language(s) is the project?") do
              .inputs.horizontal
                = checkbox_input("project_languages", "English", "english")
                = checkbox_input("project_languages", "French", "french")
                = checkbox_input("project_languages", "Spnish", "spanish")
                = checkbox_input("project_languages", "Dutch", "dutch")
                = checkbox_input("project_languages", "Portuguese", "portuguese")

            = question("In what language(s) should the bugs be reported?") do
              .inputs.horizontal
                = checkbox_input("report_languages", "English", "english")
                = checkbox_input("report_languages", "French", "french")
                = checkbox_input("report_languages", "Spnish", "spanish")
                = checkbox_input("report_languages", "Dutch", "dutch")
                = checkbox_input("report_languages", "Portuguese", "portuguese")

        /.step-nav-buttons
            = next_step_button(5, "Methodology")
            = prev_step_button(3)
        = wizard_step(3) do
          = question("What methodology are you looking for?") do
            .inputs
              = radio_input("methodology", "Exploratory", "exploratory", true, "This is unscripted testing. Our testers use your product like any normal user would.")
                textarea placeholder="Please provide testing instructions for the testers here..." rows="3"
                .actions
                  button
                    |ok
              = radio_input("methodology", "Test-case driven", "test_case_driven", false, "You provide a specific list of steps that testers must execute.")
                textarea placeholder="Please provide testing instructions for the testers here..." rows="3"
                .actions
                  button
                    |ok
          = question("What are the product's main components?") do
            p.light
              |Optionally, you can provide a list of the main components of your product. This is used to group the bugs around certain aspects of your product. For example, these can be: Homepage, Contact us form, Main menu, Level 1 etc. or UI issues and functional issues.
            .selectize-tags-input
              input type="text" id="input-tags" class="demo-default" value="awesome,neat"

        /.step-nav-buttons
            = next_step_button(6, "Project data")
            = prev_step_button(4)



        = wizard_step(4) do
          = question("Please provide the URL or file to be tested") do
            input type="url" placeholder="http://domain.com"
            |or
            .button-upload
          = question("Does the product require a username or password to be accessed?") do
            .inputs
              = radio_input("require_login", "No, it does not require a username or password", "no", true)
              = radio_input("require_login", "Yes, here they are:", "yes")
                input type="text"
                input type="password"
          .comment.optional
            label.display-block
              |Add a comment
            textarea rows="3" placeholder="Type your instructions and additional information here..."
            .actions
              button
                |ok

    /.step-nav-buttons
            = summary_button
            = prev_step_button(5)





    /#wizard-help ng-class="wizard.show_help ? 'visible' : 'hide'"
      #wizard-help-fixed
        .content
          #wizard-help-welcome
            |Welcome to the test wizard. Please choose type of test and platform to proceed.
        .footer
          = go_button("Configure", class: "wizard.type_of_test && wizard.product_type && !wizard.configure_mode ? 'visible' : 'hide'", click: "configure();" )


    /#wizard-summary ng-class="wizard.show_mini_summary ? 'visible' : 'hide'"
      #wizard-summary-fixed
        .header
          |Summary
        .content
          .steps-completed
            label
              |Steps completed:
            .progress-bar
              .progress-area
                .progress-line
              .completed-step-number
                |0
              .total-steps
                |6
          /p.test-type-and-product-type
            = raw "<span class='test-type'>You ordered <span class='test name'>Functional test</span></span><span class='product-type'> for <span class='name'>Responsive website</span></span>"

          .platforms
            .row.header
              .columns.large-6
                |Platforms:
              .columns.large-3.icon.human
                = svg_placeholder "user"
              .columns.large-3.icon.hours
                = svg_placeholder "clock"
            .rows
              .row
                .columns.large-6
                  |Browsers
                .columns.large-3
                  |7
                .columns.large-3
                  |14

              .row
                .columns.large-6
                  |IOS
                .columns.large-3
                  |7
                .columns.large-3
                  |14

              .row
                .columns.large-6
                  |Android
                .columns.large-3
                  |7
                .columns.large-3
                  |14
        .footer
          .price-wrap
            .total-cost-label
              |Total cost:
            .total-price
              .currency
                |$
              |25321
          .button-go
            = svg_placeholder "rf-roket-up-right"
          .save
            = svg_placeholder "download"
            span.button-label
              |Save this project
